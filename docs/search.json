[{"path":"/TUTORIAL.html","id":null,"dir":"","previous_headings":"","what":"T3/Wheat Tutorial","title":"T3/Wheat Tutorial","text":"Tutorial uses BrAPI R package query T3/Wheat Breedbase database trials, phenotype data, genotype data. functions work BrAPI-compliant database (using v2 BrAPI specification).","code":""},{"path":"/TUTORIAL.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"T3/Wheat Tutorial","text":"BrAPI R packages installed, create connection database.","code":"wheat <- getBrAPIConnection(\"T3/Wheat\")"},{"path":"/TUTORIAL.html","id":"breeding-programs","dir":"","previous_headings":"","what":"Breeding Programs","title":"T3/Wheat Tutorial","text":"’re guiding user select specific Trials, might want allow select Breeding Program first filter number trials can select .","code":"resp <- wheat$get(\"/programs\", page=\"all\") programs <- sort(sapply(resp$combined_data, \\(x) { x$programName }))"},{"path":"/TUTORIAL.html","id":"trials","dir":"","previous_headings":"","what":"Trials","title":"T3/Wheat Tutorial","text":"want give user list trials choose , can get list trial names ids filtered selected breeding program:","code":"selected_breeding_program <- \"University of Nebraska\" resp <- wheat$get(\"/studies\", query=list(programName=selected_breeding_program), page=\"all\") trials <- lapply(resp$combined_data, \\(x) { list(id=x$studyDbId, name=x$studyName) })"},{"path":"/TUTORIAL.html","id":"trial-metadata","dir":"","previous_headings":"","what":"Trial Metadata","title":"T3/Wheat Tutorial","text":"trials interested , can get trial metadata (trial location, design type, planting/harvest dates, year, etc):","code":"selected_trials <- c(\"YldQtl-Val_2014_ClayCenter\", \"YldQtl-Val_2014_Lincoln\", \"YldQtl-Val_2014_Mead\", \"YldQtl-Val_2014_Sidney\") for ( trial_name in selected_trials ) {   resp <- wheat$get(\"/studies\", query=list(studyName=trial_name))   trial_metadata <- resp$data[[1]]   trial_id <- trial_metadata$studyDbId   location <- trial_metadata$locationName   planting_date <- trial_metadata$startDate   harvest_date <- trial_metadata$endDate   design <- trial_metadata$experimentalDesign$PUI }"},{"path":"/TUTORIAL.html","id":"trial-layout","dir":"","previous_headings":"","what":"Trial Layout","title":"T3/Wheat Tutorial","text":"plot layout trial defined getting relative plot positions. plot row column position assigned trial added database. get layout, ’ll need get plots (observation units) trial extract row column information:","code":"selected_trial_id <- \"6104\" resp <- wheat$get(\"/observationunits\", query=list(studyDbId=selected_trial_id), page=\"all\", pageSize=100) for ( plot in resp$combined_data ) {   plot_id <- plot$observationUnitDbId   plot_name <- plot$observationUnitName   row <- plot$observationUnitPosition$positionCoordinateY   col <- plot$observationUnitPosition$positionCoordinateX   accession <- plot$germplasmName }"},{"path":"/TUTORIAL.html","id":"traits-accessions-and-trait-observations","dir":"","previous_headings":"","what":"Traits, Accessions, and Trait Observations","title":"T3/Wheat Tutorial","text":"recorded trait observations accessible /observations BrAPI endpoint. response, object data represents one observation (one value recorded trait / plot pair). observation contains information plot, accession, trait observed. observations can fetched entire trial specifying trial id: ```R # Get observations single trial selected_trial_id <- “6104” resp <- wheat$get(\"/observations\", query=list(studyDbId=selected_trial_id), page=\"\", pageSize=500) observations <- resp$combined_data","code":""},{"path":"/TUTORIAL.html","id":"get-the-unique-set-of-trait-names-observed-in-this-trial","dir":"","previous_headings":"","what":"Get the unique set of trait names observed in this trial","title":"T3/Wheat Tutorial","text":"trait_names <- sort(unique(sapply(observations, (x) { x$observationVariableName } )))","code":""},{"path":"/TUTORIAL.html","id":"get-the-unique-set-of-accession-names-in-this-trial","dir":"","previous_headings":"","what":"Get the unique set of accession names in this trial","title":"T3/Wheat Tutorial","text":"accession_names <- sort(unique(sapply(observations, (x) { x$germplasmName } )))","code":""},{"path":"/TUTORIAL.html","id":"build-a-long-format-table-of-trait-observations","dir":"","previous_headings":"","what":"Build a long-format table of trait observations","title":"T3/Wheat Tutorial","text":"data <- tibble( plot_id = numeric(), plot_name = character(), accession_name = character(), trait_name = character(), value = numeric() ) ( observation observations ) { data <- rbind(data, tibble( plot_id = .numeric(observationobservationUnitDbId),plotname=observationobservationUnitDbId),  plot_name = observationobservationUnitName, accession_name = observationgermplasmName,traitname=observationgermplasmName,  trait_name = observationobservationVariableName, value = .numeric(observation$value) )) }","code":""},{"path":[]},{"path":"/TUTORIAL.html","id":"a-tibble-1759--5","dir":"","previous_headings":"","what":"A tibble: 1,759 × 5","title":"T3/Wheat Tutorial","text":"plot_id plot_name accession_name trait_name value  1 1039253 YldQtl-Val_2014_ClayCenter_CT213_2127 CT213 Bacterial leaf streak severity - 0-9 percentage scale|CO_321:0501004 5 2 1039253 YldQtl-Val_2014_ClayCenter_CT213_2127 CT213 Grain yield - kg/ha|CO_321:0001218 3410 3 1039253 YldQtl-Val_2014_ClayCenter_CT213_2127 CT213 Plant height - cm|CO_321:0001301 82 4 1039253 YldQtl-Val_2014_ClayCenter_CT213_2127 CT213 Grain protein content - %|CO_321:0001205 15.2 5 1039254 YldQtl-Val_2014_ClayCenter_NE13593_2297 NE13593 Bacterial leaf streak severity - 0-9 percentage scale|CO_321:0501004 2 6 1039254 YldQtl-Val_2014_ClayCenter_NE13593_2297 NE13593 Grain yield - kg/ha|CO_321:0001218 3416 7 1039254 YldQtl-Val_2014_ClayCenter_NE13593_2297 NE13593 Plant height - cm|CO_321:0001301 90 8 1039254 YldQtl-Val_2014_ClayCenter_NE13593_2297 NE13593 Grain protein content - %|CO_321:0001205 16.4 9 1039255 YldQtl-Val_2014_ClayCenter_HW_98_2360 HW_98 Bacterial leaf streak severity - 0-9 percentage scale|CO_321:0501004 2 10 1039255 YldQtl-Val_2014_ClayCenter_HW_98_2360 HW_98 Grain yield - kg/ha|CO_321:0001218 2993 # ℹ 1,749 rows # ℹ Use print(n = ...) see rows","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Waring. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Waring D (2025). BrAPI: BrAPI. R package version 0.3.","code":"@Manual{,   title = {BrAPI: BrAPI},   author = {David Waring},   year = {2025},   note = {R package version 0.3}, }"},{"path":"/index.html","id":"brapir","dir":"","previous_headings":"","what":"BrAPI","title":"BrAPI","text":"R package contains simple R6 Class interacting BrAPI server. holds information needed connect server (hostname) helper functions making HTTP requests BrAPI server. knowledge currently supported BrAPI endpoints. ’ll need refer BrAPI specification know endpoints use response formatted.","code":"# Get a BrAPI Connection wheat <- getBrAPIConnection(\"T3/Wheat\")  # Get Studies associated with the Cornell breeding program resp <- wheat$get(\"/studies\", query=list(programName=\"Cornell University\"), pageSize=1000) studies <- resp$data   # Get all Germplasm stored in the database resp <- wheat$get(\"/germplasm\", page=\"all\", pageSize=5000) germplasm <- resp$combined_data"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"BrAPI","text":"package can installed directly GitHub, using devtools package.","code":"# Install devtools, if you haven't already install.packages(\"devtools\")  # Install the BrAPI package from GitHub library(devtools) install_github(\"TriticeaeToolbox/BrAPI.R\") library(BrAPI)"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"BrAPI","text":"Reference Documentation can found : https://triticeaetoolbox.github.io/BrAPI.R","code":""},{"path":"/index.html","id":"creating-a-brapi-connection","dir":"","previous_headings":"","what":"Creating a BrAPI Connection","title":"BrAPI","text":"BrAPIConnection Class contains information BrAPI server helper functions making HTTP requests. known pre-configured BrAPI connections included package. see list known BrAPI connections, use listBrAPIConnections() function: use known BrAPI connection, reference name getBrAPIConnection() function: manually create BrAPI connection, ’ll need specify host BrAPI server (optionally set protocol, path, /version) createBrAPIConnection() function:","code":"listBrAPIConnections() # PRINTS: # Known BrAPI Connections: #  T3/Wheat = wheat.triticeaetoolbox.org [v2] #  T3/Wheat Sandbox = wheat-sandbox.triticeaetoolbox.org [v2] #  T3/Oat = oat.triticeaetoolbox.org [v2] #  T3/Oat Sandbox = oat-sandbox.triticeaetoolbox.org [v2] #  T3/Barley = barley.triticeaetoolbox.org [v2] #  T3/Barley Sandbox = barley-sandbox.triticeaetoolbox.org [v2] #  Cassavabase = cassavabase.org [v2] wheat <- getBrAPIConnection(\"T3/Wheat\") kelp <- createBrAPIConnection(\"sugarkelpbase.org\") kelpv1 <- createBrAPIConnection(\"sugarkelpbase.org\", version=\"v1\")"},{"path":"/index.html","id":"breedbase-connections","dir":"","previous_headings":"Creating a BrAPI Connection","what":"Breedbase Connections","title":"BrAPI","text":"package includes breedbase-specific helper functions (pragmatically using Search Wizard) available breedbase BrAPI instances. using createBrAPIConnection() function, add is_breedbase=TRUE argument enable breedbase-specific functions. using known connections via getBrAPIConnection() function, is_breedbase argument automatically added breedbase connections.","code":"wheat <- createBrAPIConnection(\"wheat.triticeaetoolbox.org\", is_breedbase=TRUE)"},{"path":"/index.html","id":"making-http-requests","dir":"","previous_headings":"","what":"Making HTTP Requests","title":"BrAPI","text":"BrAPIConnection object, can use make HTTP Requests BrAPI server. separate helper function type HTTP request. conn$get() function - make GET request conn$post() function - make POST request conn$put() function - make PUT request","code":""},{"path":"/index.html","id":"request-parameters","dir":"","previous_headings":"Making HTTP Requests","what":"Request Parameters","title":"BrAPI","text":"request functions (get, post, put) can take following parameters: call - BrAPI endpoint make request query - (optional) named list query parameters body - (optional) named list vector body parameters (automatically converted JSON) page=\"\", available pages fetched sequentially response properties individual pages along combined data pages returned pageSize - (optional) maximum size page results return (DEFAULT: 10)","code":""},{"path":"/index.html","id":"response-format","dir":"","previous_headings":"Making HTTP Requests","what":"Response Format","title":"BrAPI","text":"return value request functions (get, post, put) return named list containing properties Response. singe-page request: response - httr response object status - parsed HTTP status content - full content body response metadata - metadata object body reponse, returned data - data object body response, returned multi-page request (page=\"\"): response - list httr response object page status - list parsed HTTP status page content - list full content body response page metadata - list metadata object body response page, returned data - list data object body response page, returned combined_data - combined vector data pages, returned","code":""},{"path":"/index.html","id":"examples","dir":"","previous_headings":"Making HTTP Requests","what":"Examples","title":"BrAPI","text":"","code":"# GET Request wheat <- getBrAPIConnection(\"T3/Wheat\") resp <- wheat$get(\"/studies\", query=list(programName=\"Cornell University\"))  # POST Request sandbox <- createBrAPIConnection(\"wheat-sandbox.triticeaetoolbox.org\") d1 <- list(observationUnitDbId=\"ou1\", observationVariableDbId=\"ov1\", value=50) d2 <- list(observationUnitDbId=\"ou2\", observationVariableDbId=\"ov1\", value=40) data <- list(d1, d2) resp <- sandbox$post(\"/token\", query=list(username=\"testing\", password=\"testing123\")) resp <- sandbox$post(\"/observations\", body=data, token=resp$content$access_token)  # PUT Request sandbox <- createBrAPIConnection(\"wheat-sandbox.triticeaetoolbox.org\") d1 <- list(observationDbId = \"ob1\", observationUnitDbId=\"ou1\", observationVariableDbId=\"ov1\", value=60) d2 <- list(observationDbId = \"ob2\", observationUnitDbId=\"ou2\", observationVariableDbId=\"ov1\", value=70) data <- list(d1, d2) resp <- sandbox$post(\"/token\", query=list(username=\"testing\", password=\"testing123\")) resp <- sandbox$put(\"/observations\", body=data, token=resp$content$access_token)"},{"path":"/index.html","id":"breedbase-functions","dir":"","previous_headings":"","what":"Breedbase Functions","title":"BrAPI","text":"package includes breedbase-specific helper functions performing non-BrAPI compliant tasks available breedbase. BrAPIConnection object needs is_breedbase argument set TRUE order functions enabled.","code":""},{"path":"/index.html","id":"search-wizard-connwizarddata_type-filters-verbose","dir":"","previous_headings":"Breedbase Functions","what":"Search Wizard: conn$wizard(data_type, filters, verbose)","title":"BrAPI","text":"breedbase Search Wizard great tool quickly filtering combining datasets database. can use request data specific data type matches specified filter criteria. example, can use find genotyping protocols data set accessions observed set field trials. Search Wizard response data include ids, names, map names -> ids matching data: filters argument can contain 3 different filters. name list item one supported breedbase data types: accessions, organisms, breeding_programs, genotyping_protocols, genotyping_projects, locations, plants, plots, tissue_sample, seedlots, trait_components, traits, trials, trial_designs, trial_types, years","code":"wheat <- getBrAPIConnection(\"T3/WheatCAP\")  # Find accessions that were observed in these two trials accessions <- wheat$wizard(\"accessions\", list(trials = c(\"CornellMaster_2024_Helfer\", \"CornellMaster_2025_McGowan\")), verbose=T)  # Get genotyping protocols that have data for any of the trial's accessions geno <- wheat$wizard(\"genotyping_protocols\", list(accessions = accessions$data$ids)) > geno$data$ids [1] 265 287 130 242  > geno$data$names [1] \"GBS Cornell 2024\"  \"GBS Cornell 2025\"  \"GBS CornellMaster\"  \"GBS MSU\"  > geno$data$map $`GBS Cornell 2024` [1] 265  $`GBS Cornell 2025` [1] 287  $`GBS CornellMaster` [1] 130  $`GBS MSU` [1] 242 # Find all trials from these two breeding programs from one year trials <- wheat$wizard(\"trials\", list(breeding_programs = c(327,367), years = c(2023)))"},{"path":"/index.html","id":"tutorial","dir":"","previous_headings":"","what":"Tutorial","title":"BrAPI","text":"-depth tutorial using data T3/Wheat can found TUTORIAL.md file.","code":""},{"path":"/reference/BrAPIConnection.html","id":null,"dir":"Reference","previous_headings":"","what":"BrAPI Connection Class — BrAPIConnection","title":"BrAPI Connection Class — BrAPIConnection","text":"BrAPI Connection Class BrAPI Connection Class","code":""},{"path":"/reference/BrAPIConnection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BrAPI Connection Class — BrAPIConnection","text":"R6 Class representing connection BrAPI server. Class provides information needed connecting BrAPI server. host field required.  fields, default value used one provided. Add is_breedbase=TRUE argument enable breedbase-specific functions. Class also provides helper functions making requests BrAPI server.  Use conn$get() make GET request, conn$post() make POST request, conn$put() make PUT request. return value request function contains named list properties Response(s). singe-page request: response = httr response object status = parsed HTTP status content = full content body response metadata = metadata object body reponse, returned data = data object body response, returned multi-page request (page=\"\"): response = list httr response object page status = list parsed HTTP status page content = list full content body response page metadata = list metadata object body response page, returned data = list data object body response page, returned combined_data = combined vector data pages, returned","code":""},{"path":"/reference/BrAPIConnection.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"BrAPI Connection Class — BrAPIConnection","text":"protocol HTTP protocol - either 'http' 'https' (Default: https) host hostname BrAPI server path base bath BrAPI endpoints (including version) (Default: /brapi/) version BrAPI version ('v1' 'v2') (Default: v2) is_breedbase flag indicate BrAPI connection breedbase instance.  adds additional support breedbase-specific functionality. (Default: FALSE)","code":""},{"path":[]},{"path":"/reference/BrAPIConnection.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"BrAPI Connection Class — BrAPIConnection","text":"BrAPIConnection$new() BrAPIConnection$get() BrAPIConnection$post() BrAPIConnection$put() BrAPIConnection$wizard() BrAPIConnection$clone()","code":""},{"path":"/reference/BrAPIConnection.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"BrAPI Connection Class — BrAPIConnection","text":"Create new BrAPIConnection object","code":""},{"path":"/reference/BrAPIConnection.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BrAPI Connection Class — BrAPIConnection","text":"","code":"BrAPIConnection$new(   host,   protocol = \"https\",   path = \"/brapi/\",   version = \"v2\",   is_breedbase = FALSE )"},{"path":"/reference/BrAPIConnection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BrAPI Connection Class — BrAPIConnection","text":"host (required) hostname BrAPI server protocol (optional) HTTP protocol - either 'http' 'https' path (optional) base path BrAPI endpoints version (optional) BrAPI version is_breedbase (optional) set TRUE connection breedbase instance","code":""},{"path":"/reference/BrAPIConnection.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"BrAPI Connection Class — BrAPIConnection","text":"BrAPIConnection object","code":""},{"path":"/reference/BrAPIConnection.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"BrAPI Connection Class — BrAPIConnection","text":"Make GET request","code":""},{"path":"/reference/BrAPIConnection.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"BrAPI Connection Class — BrAPIConnection","text":"","code":"BrAPIConnection$get(call, ...)"},{"path":"/reference/BrAPIConnection.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"BrAPI Connection Class — BrAPIConnection","text":"call BrAPI endpoint request ... (optional) Additional arguments passed httr query (optional) named list query parameters page (optional) index page results (use '' get pages) (Default: 0) pageSize (optional) max size result pages (Default: 10) token (optional) Authorization token add request verbose (optional) Set true include additional output console Response","code":""},{"path":"/reference/BrAPIConnection.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"BrAPI Connection Class — BrAPIConnection","text":"named list Response properties","code":""},{"path":"/reference/BrAPIConnection.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BrAPI Connection Class — BrAPIConnection","text":"","code":"# Making a GET request resp <- wheat$get(\"/germplasm\", pageSize=100) resp <- wheat$get(\"/studies\", pageSize=1000, page=\"all\") resp <- wheat$get(\"/studies\", query=list(programName=\"Cornell University\"), pageSize=1000)"},{"path":"/reference/BrAPIConnection.html","id":"method-post-","dir":"Reference","previous_headings":"","what":"Method post()","title":"BrAPI Connection Class — BrAPIConnection","text":"Make POST request","code":""},{"path":"/reference/BrAPIConnection.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"BrAPI Connection Class — BrAPIConnection","text":"","code":"BrAPIConnection$post(call, ...)"},{"path":"/reference/BrAPIConnection.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"BrAPI Connection Class — BrAPIConnection","text":"call BrAPI endpoint request ... (optional) Additional arguments passed httr query (optional) named list query parameters body (optional) named list vector request body (converted JSON) page (optional) index page results (use '' get pages) (Default: 0) pageSize (optional) max size result pages (Default: 10) token (optional) Authorization token add request verbose (optional) Set true include additional output console Response","code":""},{"path":"/reference/BrAPIConnection.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"BrAPI Connection Class — BrAPIConnection","text":"named list Response properties","code":""},{"path":"/reference/BrAPIConnection.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"BrAPI Connection Class — BrAPIConnection","text":"","code":"# Make a POST request \\dontrun{ sandbox <- BrAPIConnection$new(\"wheat-sandbox.triticeaetoolbox.org\") d1 <- list(observationUnitDbId=\"ou1\", observationVariableDbId=\"ov1\", value=50) d2 <- list(observationUnitDbId=\"ou2\", observationVariableDbId=\"ov1\", value=40) data <- list(d1, d2) resp <- sandbox$post(\"/token\", query=list(username=\"testing\", password=\"testing123\")) resp <- sandbox$post(\"/observations\", body=data, token=resp$content$access_token) }"},{"path":"/reference/BrAPIConnection.html","id":"method-put-","dir":"Reference","previous_headings":"","what":"Method put()","title":"BrAPI Connection Class — BrAPIConnection","text":"Make PUT request","code":""},{"path":"/reference/BrAPIConnection.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"BrAPI Connection Class — BrAPIConnection","text":"","code":"BrAPIConnection$put(call, ...)"},{"path":"/reference/BrAPIConnection.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"BrAPI Connection Class — BrAPIConnection","text":"call BrAPI endpoint request ... (optional) Additional arguments passed httr query (optional) named list query parameters body (optional) named list vector request body (converted JSON) page (optional) index page results (use '' get pages) (Default: 0) pageSize (optional) max size result pages (Default: 10) token (optional) Authorization token add request verbose (optional) Set true include additional output console Response","code":""},{"path":"/reference/BrAPIConnection.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"BrAPI Connection Class — BrAPIConnection","text":"named list Response properties","code":""},{"path":"/reference/BrAPIConnection.html","id":"method-wizard-","dir":"Reference","previous_headings":"","what":"Method wizard()","title":"BrAPI Connection Class — BrAPIConnection","text":"Make Breedbase Search Wizard request","code":""},{"path":"/reference/BrAPIConnection.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"BrAPI Connection Class — BrAPIConnection","text":"","code":"BrAPIConnection$wizard(data_type, filters = list(), verbose = FALSE)"},{"path":"/reference/BrAPIConnection.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"BrAPI Connection Class — BrAPIConnection","text":"data_type data type return filtering filters list filters (3) apply search.  key name data type value vector database ids names items include filter. better use IDs - use names, function make additional queries lookup IDs names provide. Supported data types include: accessions, organisms, breeding_programs, genotyping_protocols, genotyping_projects, locations, plants, plots, tissue_sample, seedlots, trait_components, traits, trials, trial_designs, trial_types, years verbose Set TRUE include logging information","code":""},{"path":"/reference/BrAPIConnection.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"BrAPI Connection Class — BrAPIConnection","text":"response matching data. $content key contains raw breedbase response. $data key contains parsed data: list parsed ids, names map (named list item names -> ids)","code":""},{"path":"/reference/BrAPIConnection.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"BrAPI Connection Class — BrAPIConnection","text":"","code":"wheat <- createBrAPIConnection(\"wheat.triticeaetoolbox.org\", is_breedbase = TRUE)  # find matching trials, filtered by two breeding programs (identified by ids) and one year trials <- wheat$wizard(\"trials\", list(breeding_programs = c(327,367), years = c(2023)))  # find matching accessions, filtered by field trials (identified by name) accessions <- wheat$wizard(\"accessions\", list(trials = c(\"CornellMaster_2024_Helfer\", \"CornellMaster_2025_McGowan\")))  # find genotyping protocols that have data for the above set of accessions geno_protocols <- wheat$wizard(\"genotyping_protocols\", list(accessions = accessions$data$ids))"},{"path":"/reference/BrAPIConnection.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"BrAPI Connection Class — BrAPIConnection","text":"objects class cloneable method.","code":""},{"path":"/reference/BrAPIConnection.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"BrAPI Connection Class — BrAPIConnection","text":"","code":"BrAPIConnection$clone(deep = FALSE)"},{"path":"/reference/BrAPIConnection.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"BrAPI Connection Class — BrAPIConnection","text":"deep Whether make deep clone.","code":""},{"path":"/reference/BrAPIConnection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BrAPI Connection Class — BrAPIConnection","text":"","code":"# Directly Creating a new BrAPIConnection Object wheat <- BrAPIConnection$new(\"wheat.triticeaetoolbox.org\", is_breedbase=TRUE) wheatv1 <- BrAPIConnection$new(\"wheat.triticeaetoolbox.org\", version=\"v1\")  # Using the createBrAPIConnection function barley <- createBrAPIConnection(\"barley.triticeaetoolbox.org\") barleyv1 <- createBrAPIConnection(\"barley.triticeaetoolbox.org\", version=\"v1\")   ## ------------------------------------------------ ## Method `BrAPIConnection$get` ## ------------------------------------------------  # Making a GET request resp <- wheat$get(\"/germplasm\", pageSize=100) resp <- wheat$get(\"/studies\", pageSize=1000, page=\"all\") resp <- wheat$get(\"/studies\", query=list(programName=\"Cornell University\"), pageSize=1000)  ## ------------------------------------------------ ## Method `BrAPIConnection$post` ## ------------------------------------------------  # Make a POST request if (FALSE) { # \\dontrun{ sandbox <- BrAPIConnection$new(\"wheat-sandbox.triticeaetoolbox.org\") d1 <- list(observationUnitDbId=\"ou1\", observationVariableDbId=\"ov1\", value=50) d2 <- list(observationUnitDbId=\"ou2\", observationVariableDbId=\"ov1\", value=40) data <- list(d1, d2) resp <- sandbox$post(\"/token\", query=list(username=\"testing\", password=\"testing123\")) resp <- sandbox$post(\"/observations\", body=data, token=resp$content$access_token) } # }   ## ------------------------------------------------ ## Method `BrAPIConnection$wizard` ## ------------------------------------------------  wheat <- createBrAPIConnection(\"wheat.triticeaetoolbox.org\", is_breedbase = TRUE)  # find matching trials, filtered by two breeding programs (identified by ids) and one year trials <- wheat$wizard(\"trials\", list(breeding_programs = c(327,367), years = c(2023)))  # find matching accessions, filtered by field trials (identified by name) accessions <- wheat$wizard(\"accessions\", list(trials = c(\"CornellMaster_2024_Helfer\", \"CornellMaster_2025_McGowan\"))) #> Warning: There is no matching item of type trials with the name CornellMaster_2024_Helfer #> Warning: There is no matching item of type trials with the name CornellMaster_2025_McGowan  # find genotyping protocols that have data for the above set of accessions geno_protocols <- wheat$wizard(\"genotyping_protocols\", list(accessions = accessions$data$ids))"},{"path":"/reference/BrAPIRequest.html","id":null,"dir":"Reference","previous_headings":"","what":"BrAPI Request — BrAPIRequest","title":"BrAPI Request — BrAPIRequest","text":"Make BrAPI request using provided BrAPIConnection method specified BrAPI call.  BrAPIConnection provides BrAPI server details (hostname path), method specifies HTTP method (GET, POST, etc) call specifies specific BrAPI endpoint request.","code":""},{"path":"/reference/BrAPIRequest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BrAPI Request — BrAPIRequest","text":"","code":"BrAPIRequest(   method,   base,   call,   ...,   query = list(),   body = list(),   page = 0,   pageSize = 10,   token = NULL )"},{"path":"/reference/BrAPIRequest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BrAPI Request — BrAPIRequest","text":"method HTTP Method use base base URL BrAPI endpoints call BrAPI endpoint request query named list query parameters body named list vector POST request's body page page results return (Default: 0). set '', pageSize size page results return (Default: 10) token Authorization Token added Authorization Header","code":""},{"path":"/reference/BrAPIRequest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BrAPI Request — BrAPIRequest","text":"named list containing Response properties","code":""},{"path":"/reference/BrAPIRequest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BrAPI Request — BrAPIRequest","text":"cases, call function directly.  Instead use helper functions provided BrAPIConnection object.  example: wheat <- getBrAPIConnection(\"T3/Wheat\") resp <- wheat$get(\"/germplasm\", pageSize=500) resp <- wheat$post(\"/observations\", body=data)","code":""},{"path":"/reference/KNOWN_BRAPI_CONNECTIONS.html","id":null,"dir":"Reference","previous_headings":"","what":"Known BrAPI Connections — KNOWN_BRAPI_CONNECTIONS","title":"Known BrAPI Connections — KNOWN_BRAPI_CONNECTIONS","text":"list pre-configured BrAPIConnections known BrAPI servers","code":""},{"path":"/reference/KNOWN_BRAPI_CONNECTIONS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Known BrAPI Connections — KNOWN_BRAPI_CONNECTIONS","text":"","code":"KNOWN_BRAPI_CONNECTIONS"},{"path":"/reference/KNOWN_BRAPI_CONNECTIONS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Known BrAPI Connections — KNOWN_BRAPI_CONNECTIONS","text":"object class list length 8.","code":""},{"path":"/reference/createBrAPIConnection.html","id":null,"dir":"Reference","previous_headings":"","what":"Create BrAPI Connection — createBrAPIConnection","title":"Create BrAPI Connection — createBrAPIConnection","text":"Create BrAPI connection specified host","code":""},{"path":"/reference/createBrAPIConnection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create BrAPI Connection — createBrAPIConnection","text":"","code":"createBrAPIConnection(   host = NULL,   protocol = \"https\",   path = \"/brapi/\",   version = \"v2\",   is_breedbase = FALSE )"},{"path":"/reference/createBrAPIConnection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create BrAPI Connection — createBrAPIConnection","text":"host BrAPI server hostname protocol (optional) HTTP protocol (either 'http' 'https') (DEFAULT: https) path (optional) base path BrAPI endpoints (without version) (DEFAULT: /brapi/) version (optional) BrAPI version use (DEFAULT: v2) is_breedbase (optional) set TRUE connection breedbase instance (DEFAULT: FALSE)","code":""},{"path":"/reference/createBrAPIConnection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create BrAPI Connection — createBrAPIConnection","text":"BrAPIConnection","code":""},{"path":"/reference/createBrAPIConnection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create BrAPI Connection — createBrAPIConnection","text":"","code":"wheat <- createBrAPIConnection(\"wheat.triticeaetoolbox.org\", is_breedbase=TRUE) oatv1 <- createBrAPIConnection(\"oat.triticeaetoolbox.org\", version=\"v1\", is_breedbase=TRUE)"},{"path":"/reference/getBrAPIConnection.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Known BrAPI Connection — getBrAPIConnection","title":"Get Known BrAPI Connection — getBrAPIConnection","text":"Get connection details known BrAPI server","code":""},{"path":"/reference/getBrAPIConnection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Known BrAPI Connection — getBrAPIConnection","text":"","code":"getBrAPIConnection(name = NULL)"},{"path":"/reference/getBrAPIConnection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Known BrAPI Connection — getBrAPIConnection","text":"name name known BrAPI server","code":""},{"path":"/reference/getBrAPIConnection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Known BrAPI Connection — getBrAPIConnection","text":"BrAPIConnection","code":""},{"path":"/reference/getBrAPIConnection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Known BrAPI Connection — getBrAPIConnection","text":"","code":"wheat <- getBrAPIConnection(\"T3/Wheat\") cassava <- getBrAPIConnection(\"Cassavabase\")"},{"path":"/reference/getBrAPIConnections.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all Known BrAPI Connections — getBrAPIConnections","title":"Get all Known BrAPI Connections — getBrAPIConnections","text":"Return list known BrAPI Connections","code":""},{"path":"/reference/getBrAPIConnections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all Known BrAPI Connections — getBrAPIConnections","text":"","code":"getBrAPIConnections()"},{"path":"/reference/getBrAPIConnections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all Known BrAPI Connections — getBrAPIConnections","text":"list(BrAPIConnection)","code":""},{"path":"/reference/getBrAPIConnections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all Known BrAPI Connections — getBrAPIConnections","text":"","code":"connections <- getBrAPIConnections()"},{"path":"/reference/listBrAPIConnections.html","id":null,"dir":"Reference","previous_headings":"","what":"List Known BrAPI Connections — listBrAPIConnections","title":"List Known BrAPI Connections — listBrAPIConnections","text":"List known BrAPI connections can used getBrAPIConnection(name).","code":""},{"path":"/reference/listBrAPIConnections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Known BrAPI Connections — listBrAPIConnections","text":"","code":"listBrAPIConnections()"},{"path":"/reference/listBrAPIConnections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Known BrAPI Connections — listBrAPIConnections","text":"","code":"listBrAPIConnections() #> Known BrAPI Connections: #>   T3/Wheat = wheat.triticeaetoolbox.org [v2] #>   T3/Wheat Sandbox = wheat-sandbox.triticeaetoolbox.org [v2] #>   T3/WheatCAP = wheatcap.triticeaetoolbox.org [v2] #>   T3/Oat = oat.triticeaetoolbox.org [v2] #>   T3/Oat Sandbox = oat-sandbox.triticeaetoolbox.org [v2] #>   T3/Barley = barley.triticeaetoolbox.org [v2] #>   T3/Barley Sandbox = barley-sandbox.triticeaetoolbox.org [v2] #>   Cassavabase = cassavabase.org [v2]"}]
